import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:path_provider/path_provider.dart';
import 'package:share_plus/share_plus.dart';
import 'dart:io';
import '../util.dart' show generatePdfBytes;
import '../utils/pdf_utils.dart';
import '../utils/word_utils.dart';
import '../utils/xlsx_utils.dart';
import '../utils/pptx_utils.dart';
import '../utils/text_utils.dart';
import '../utils/image_utils.dart';
import 'dart:ui' as ui;

class HomePage extends StatefulWidget {
  const HomePage({super.key});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  final TextEditingController _contentController = TextEditingController();
  final FocusNode _contentFocusNode = FocusNode();
  bool _isGenerating = false;
  int _selectedThemeIndex = 0;
  File? _previewImageFile;
  ui.Image? _previewImage;
  bool _isPreviewing = false;

  @override
  void initState() {
    super.initState();
    _contentFocusNode.addListener(() {
      if (!_contentFocusNode.hasFocus) {
        FocusScope.of(context).unfocus();
      }
    });
  }

  @override
  void dispose() {
    _contentController.dispose();
    _contentFocusNode.dispose();
    super.dispose();
  }

  Future<void> _generatePDF() async {
    if (_contentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter content')),
      );
      return;
    }

    setState(() {
      _isGenerating = true;
    });

    try {
      final String markdownContent = _contentController.text;

      final pdfBytes = await generatePdfBytes(markdownContent);

      // 获取应用文档目录
      final directory = await getApplicationDocumentsDirectory();
      final now = DateTime.now();
      final fileName =
          '${now.year}${now.month.toString().padLeft(2, '0')}${now.day.toString().padLeft(2, '0')}_${now.hour.toString().padLeft(2, '0')}${now.minute.toString().padLeft(2, '0')}${now.second.toString().padLeft(2, '0')}.pdf';
      final file = File('${directory.path}/$fileName');
      await file.writeAsBytes(pdfBytes);

      // 保存到历史记录
      await PDFUtils.savePDFAndAddToHistory(
        pdfFile: file,
        title: markdownContent.substring(0, 20),
      );

      if (mounted) {
        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'PDF document generated by AI Transfer',
        );
      }
    } catch (e) {
      print('Failed to generate PDF: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate PDF: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isGenerating = false;
        });
      }
    }
  }

  Future<void> _generateWord() async {
    if (_contentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter content')),
      );
      return;
    }

    setState(() {
      _isGenerating = true;
    });

    try {
      final file =
          await WordUtils.generateWordFromMarkdown(_contentController.text);

      if (mounted) {
        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Word document generated by AI Transfer',
        );
      }
    } catch (e) {
      print('Failed to generate Word document: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate Word document: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isGenerating = false;
        });
      }
    }
  }

  Future<void> _generateXlsx() async {
    if (_contentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter content')),
      );
      return;
    }

    setState(() {
      _isGenerating = true;
    });

    try {
      final file =
          await XlsxUtils.generateXlsxFromMarkdown(_contentController.text);

      if (mounted) {
        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Excel document generated by AI Transfer',
        );
      }
    } catch (e) {
      print('Failed to generate Excel document: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate Excel document: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isGenerating = false;
        });
      }
    }
  }

  Future<void> _generatePPTX() async {
    if (_contentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter content')),
      );
      return;
    }

    setState(() {
      _isGenerating = true;
    });

    try {
      final file =
          await PPTXUtils.generatePPTXFromMarkdown(_contentController.text);

      if (mounted) {
        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'PowerPoint document generated by AI Transfer',
        );
      }
    } catch (e) {
      print('Failed to generate PowerPoint document: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate PowerPoint document: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isGenerating = false;
        });
      }
    }
  }

  Future<void> _generateText() async {
    if (_contentController.text.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter content')),
      );
      return;
    }

    setState(() {
      _isGenerating = true;
    });

    try {
      final file = await TextUtils.generateTextFromContent(_contentController.text);
      
      if (mounted) {
        await Share.shareXFiles(
          [XFile(file.path)],
          text: 'Text document generated by AI Transfer',
        );
      }
    } catch (e) {
      print('Failed to generate Text document: $e');
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to generate Text document: $e')),
        );
      }
    } finally {
      if (mounted) {
        setState(() {
          _isGenerating = false;
        });
      }
    }
  }

  Future<void> _generatePreviewImage({int? themeIndex}) async {
    setState(() {
      _isPreviewing = true;
    });
    final img = await ImageUtils.previewImageFromText(
      _contentController.text,
      kImageThemes[themeIndex ?? _selectedThemeIndex],
    );
    setState(() {
      _previewImage = img;
      if (themeIndex != null) _selectedThemeIndex = themeIndex;
      _isPreviewing = false;
    });
  }

  void _showImagePreviewDrawer() async {
    await _generatePreviewImage();
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      builder: (context) {
        return StatefulBuilder(
          builder: (context, setModalState) {
            return Container(
              height: MediaQuery.of(context).size.height * 2/3,
              padding: const EdgeInsets.all(16.0),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  const Text('图片预览', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                  const SizedBox(height: 16),
                  if (_isPreviewing)
                    const CircularProgressIndicator()
                  else if (_previewImage != null)
                    Expanded(
                      child: SingleChildScrollView(
                        child: RawImage(
                          image: _previewImage,
                          fit: BoxFit.contain,
                        ),
                      ),
                    ),
                  const SizedBox(height: 16),
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      _buildOptionButton(
                        icon: Icons.palette_outlined,
                        label: '主题',
                        onTap: () {
                          showModalBottomSheet(
                            context: context,
                            builder: (context) {
                              return Container(
                                padding: const EdgeInsets.all(16),
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    const Text('选择主题', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
                                    const SizedBox(height: 16),
                                    SizedBox(
                                      height: 200,
                                      child: GridView.builder(
                                        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                                          crossAxisCount: 2,
                                          childAspectRatio: 2.5,
                                          crossAxisSpacing: 10,
                                          mainAxisSpacing: 10,
                                        ),
                                        itemCount: kImageThemes.length,
                                        itemBuilder: (context, index) {
                                          final theme = kImageThemes[index];
                                          return GestureDetector(
                                            onTap: () async {
                                              setModalState(() {
                                                _isPreviewing = true;
                                              });
                                              final img = await ImageUtils.previewImageFromText(
                                                _contentController.text,
                                                theme,
                                              );
                                              setModalState(() {
                                                _previewImage = img;
                                                _selectedThemeIndex = index;
                                                _isPreviewing = false;
                                              });
                                              // Navigator.pop(context);
                                            },
                                            child: Container(
                                              padding: const EdgeInsets.all(8),
                                              decoration: BoxDecoration(
                                                color: theme.backgroundColors[0],
                                                border: Border.all(
                                                  color: index == _selectedThemeIndex ? Colors.blue : Colors.transparent,
                                                  width: 2,
                                                ),
                                                borderRadius: BorderRadius.circular(8),
                                              ),
                                              child: Center(
                                                child: Text(
                                                  theme.name,
                                                  style: TextStyle(color: theme.textColor),
                                                ),
                                              ),
                                            ),
                                          );
                                        },
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            },
                          );
                        },
                      ),
                      _buildOptionButton(
                        icon: Icons.format_size,
                        label: '字号',
                        onTap: () {
                          // TODO: 实现字号调整功能
                        },
                      ),
                      _buildOptionButton(
                        icon: Icons.save_alt,
                        label: '保存',
                        onTap: () async {
                          final file = await ImageUtils.generateImageFromText(
                            _contentController.text,
                            kImageThemes[_selectedThemeIndex],
                          );
                          // Navigator.of(context).pop();
                          setState(() {
                            _previewImageFile = file;
                          });
                        },
                      ),
                    ],
                  ),
                ],
              ),
            );
          },
        );
      },
    );
  }

  Widget _buildOptionButton({
    required IconData icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 48,
            height: 48,
            decoration: BoxDecoration(
              color: Colors.blue.withOpacity(0.1),
              borderRadius: BorderRadius.circular(12),
            ),
            child: Icon(icon, color: Colors.blue[700]),
          ),
          const SizedBox(height: 4),
          Text(label, style: TextStyle(fontSize: 12, color: Colors.grey[700])),
        ],
      ),
    );
  }

  Widget _buildPasteButton(TextEditingController controller) {
    return GestureDetector(
      onTap: () async {
        ClipboardData? data = await Clipboard.getData('text/plain');
        if (data != null && data.text != null) {
          controller.text = data.text!;
          setState(() {});
        }
      },
      child: Container(
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
        decoration: BoxDecoration(
          color: Colors.blue.withOpacity(0.1),
          borderRadius: BorderRadius.circular(6),
        ),
        child: Row(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(Icons.copy, size: 16, color: Colors.blue[700]),
            const SizedBox(width: 4),
            Text('Paste', style: TextStyle(color: Colors.blue[700])),
          ],
        ),
      ),
    );
  }

  Widget _buildInputSection(String title, TextEditingController controller) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Text(title,
                  style: const TextStyle(
                      fontSize: 16, fontWeight: FontWeight.w500)),
              _buildPasteButton(controller),
            ],
          ),
        ),
        const SizedBox(height: 8),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 16.0),
          child: TextField(
            controller: controller,
            focusNode: _contentFocusNode,
            maxLines: 10,
            decoration: InputDecoration(
              hintText: 'Enter main content',
              border: OutlineInputBorder(
                borderRadius: BorderRadius.circular(8),
              ),
              contentPadding: const EdgeInsets.all(12),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildFormatButton(IconData icon, String label, VoidCallback onTap) {
    return GestureDetector(
        onTap: onTap,
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Container(
              width: 48,
              height: 48,
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(12),
              ),
              child: Icon(icon, color: Colors.blue[700]),
            ),
            const SizedBox(height: 4),
            Text(label,
                style: TextStyle(fontSize: 12, color: Colors.grey[700])),
          ],
        ));
  }

  @override
  Widget build(BuildContext context) {
    return GestureDetector(
      onTap: () {
        FocusScope.of(context).unfocus();
      },
      child: Scaffold(
        resizeToAvoidBottomInset: true,
        appBar: AppBar(
          title: const Text('AI Transfer'),
          centerTitle: true,
        ),
        body: LayoutBuilder(
          builder: (context, constraints) {
            return SingleChildScrollView(
              padding: EdgeInsets.only(
                bottom: MediaQuery.of(context).viewInsets.bottom,
              ),
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  minHeight: constraints.maxHeight,
                ),
                child: IntrinsicHeight(
                  child: Column(
                    children: [
                      Expanded(
                        child: _buildInputSection(
                            'Main Content', _contentController),
                      ),
                      Container(
                        padding: const EdgeInsets.all(16),
                        decoration: BoxDecoration(
                          color: Colors.white,
                          boxShadow: [
                            BoxShadow(
                              color: Colors.black.withOpacity(0.05),
                              blurRadius: 10,
                              offset: const Offset(0, -2),
                            ),
                          ],
                        ),
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Padding(
                              padding: EdgeInsets.only(left: 8.0, bottom: 12.0),
                              child: Row(
                                mainAxisAlignment:
                                    MainAxisAlignment.spaceBetween,
                                children: [
                                  Text(
                                    'Format',
                                    style: TextStyle(
                                      fontSize: 14,
                                      fontWeight: FontWeight.w500,
                                    ),
                                  ),
                                  Text(
                                    'Click icon to convert',
                                    style: TextStyle(
                                      fontSize: 12,
                                      color: Colors.grey,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                            Row(
                              mainAxisAlignment: MainAxisAlignment.spaceAround,
                              children: [
                                _buildFormatButton(Icons.description_outlined,
                                    'Word', _generateWord),
                                _buildFormatButton(
                                    Icons.picture_as_pdf_outlined,
                                    'PDF',
                                    _generatePDF),
                                _buildFormatButton(Icons.slideshow_outlined,
                                    'Slides', _generatePPTX),
                                _buildFormatButton(Icons.table_chart_outlined,
                                    'Sheet', _generateXlsx),
                                _buildFormatButton(
                                    Icons.image_outlined, 'Image', _showImagePreviewDrawer),
                                _buildFormatButton(
                                    Icons.text_fields_outlined, 'Text', _generateText),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
